     class  client (nc: string) (dc: int) (co: float*float) =
  object
    val nom = nc
    val demande = dc
    val coordonnees = co
    val mutable distance = 0.0
    method get_nom = nom
    method get_demande = demande
    method get_coordonnees = coordonnees
    method get_distance = distance
    method set_distance (d: float) = distance <- d
  end
   
     (* Classe itineraire *)
  class itineraire =
  let num = ref 1 in
    fun (c : int) ->
  object(self)
    val numero = !num
    val capacite = c
    val mutable demande_totale = 0
    val mutable distance_totale = 0.0
    val mutable liste_clients : client list = []
    method get_numero = numero
    method get_capacite = capacite
    method get_demande_totale = demande_totale
    method get_distance_totale = distance_totale
    method get_liste_clients = liste_clients
    method set_demande_totale (d: int) = demande_totale <- d
    method set_distance_totale (dis: float) = distance_totale <- dis
    method set_liste_clients  (l: client list) = liste_clients <- l
    initializer
      num := !num + 1

  (* Classe plan *) 
  class plan (sp: string) =
  object
    val sorte_plan : string = sp
    method get_sorte_plan = sorte_plan
  end

  (* Classe plan_distribution *)
  class plan_distribution (sp: string) (np: string) =
  object(self)
    inherit plan sp as parent
    val nom_plan : string = np
    val mutable liste_itineraires : itineraire list = []
    method get_nom_plan = nom_plan
    method get_liste_itineraires = liste_itineraires
    method set_liste_itineraires (l : itineraire list) = liste_itineraires <- l
-------------------------------------------------------------------

      Printf.printf "DemandeTotale: %d; DistanceTotale: %F; Clients: %s \n" self#get_demande_totale self#get_distance_totale noms
   (* -- À IMPLANTER (6 PTS) --------------------------------------------------*)
   (* @Méthode : afficher_plan_distribution1: unit                             *)
   (* @Description : Affiche le plan dans l’interpréteur d’Ocaml (voir énoncé) *)
   (* @Exception: Lance l'exception Failure si le plan est vide                *)

    method afficher_plan_distribution1 =
      	Printf.printf "Nom du plan: %s\n" self#get_nom_plan;
      	Printf.printf "Nombre des itineraires: %d\n" length self#get_liste_itineraires;
      	Printf.printf "Nombre des clients: %d\n" length self#retourner_liste_clients
      	print_endline "Liste des itineraires: "
    	let rec rec_afficher_itineraires (l: itineraire list) = match l with
    	|[] -> ()
    	|e::r -> Printf.printf "it %d: " e#get_numero; e#afficher_itineraire; rec_afficher_itineraires r
    	in rec_afficher_itineraires self#get_liste_itineraires
    	
    methode private compter_clients = let rec rec_compter_clients l n =
    	match l with
    	|[] -> n
    	|e::r -> rec_compter_clients r (n + (length e#gretourner_liste_clients)) in
    	rec_compter_clients self#get_liste_itineraires 0
    	
    	(* Résultat:
Nom du plan: Transport marchandise
Nombre des itineraires: 4
Nombre des clients: 23
Liste des itineraires:
it 1: DemandeTotale: 51; DistanceTotale: 198.160779731; Clients: c7 c14 c22 c3 c11 c23
it 2: DemandeTotale: 49; DistanceTotale: 169.045003635; Clients: c13 c1 c2 c10 c20 c19
it 3: DemandeTotale: 44; DistanceTotale: 158.329072921; Clients: c4 c18 c8 c16
it 4: DemandeTotale: 47; DistanceTotale: 206.558036463; Clients: c6 c12 c17 c21 c5 c15 c9
- : unit = ()
*)



