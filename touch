     class  client (nc: string) (dc: int) (co: float*float) =
  object
    val nom = nc
    val demande = dc
    val coordonnees = co
    val mutable distance = 0.0
    method get_nom = nom
    method get_demande = demande
    method get_coordonnees = coordonnees
    method get_distance = distance
    method set_distance (d: float) = distance <- d
  end
   
     (* Classe itineraire *)
  class itineraire =
  let num = ref 1 in
    fun (c : int) ->
  object(self)
    val numero = !num
    val capacite = c
    val mutable demande_totale = 0
    val mutable distance_totale = 0.0
    val mutable liste_clients : client list = []
    method get_numero = numero
    method get_capacite = capacite
    method get_demande_totale = demande_totale
    method get_distance_totale = distance_totale
    method get_liste_clients = liste_clients
    method set_demande_totale (d: int) = demande_totale <- d
    method set_distance_totale (dis: float) = distance_totale <- dis
    method set_liste_clients  (l: client list) = liste_clients <- l
    initializer
      num := !num + 1

  (* Classe plan *) 
  class plan (sp: string) =
  object
    val sorte_plan : string = sp
    method get_sorte_plan = sorte_plan
  end

  (* Classe plan_distribution *)
  class plan_distribution (sp: string) (np: string) =
  object(self)
    inherit plan sp as parent
    val nom_plan : string = np
    val mutable liste_itineraires : itineraire list = []
    method get_nom_plan = nom_plan
    method get_liste_itineraires = liste_itineraires
    method set_liste_itineraires (l : itineraire list) = liste_itineraires <- l
-------------------------------------------------------------------
   (* -- À IMPLANTER (4 PTS) --------------------------------------------*)
   (* @Méthode : retourner_itineraire : int -> itineraire                *)
   (* @Description : Retourne l'itinéraire se trouvant dans le plan      *)
   (* @Exception: Lance l'exception Failure si l'itinéraire n'existe pas *)

    method retourner_itineraire (indice: int) =
             (*definition de fonction recursive*)
      let rec rec_retourner_itineraire (n: int) (l: itineraire list) =
        match l with
                |[] -> failwith "Cet itineraire n'existe pas."
                |e::r -> if (e#get_numero = n) then e else rec_retourner_client n r in
       (*appel de la fonction recursive avec les bon parametres*)
      rec_retourner_itineraire indice (self#get_liste_itineraires)





